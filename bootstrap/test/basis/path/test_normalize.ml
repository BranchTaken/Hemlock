open! Basis.Rudiments
open! Basis
open Path

let test () =
  List.iter [
    "";
    "/";
    "//";
    "////";

    "../a";
    "/../a";
    "//../a";
    "///../a";

    "./../a";
    "/./../a";
    "a/b//../c";
    "a/b/./../c";

    "///"; "///."; "///.."; "///a"; "//./"; "//./."; "//./.."; "//./a"; "//../"; "//../.";
    "//../.."; "//../a"; "//a/"; "//a/."; "//a/.."; "//a/b"; "/.//"; "/.//."; "/.//.."; "/.//a";
    "/././"; "/././."; "/././.."; "/././a"; "/./../"; "/./../."; "/./../.."; "/./../a"; "/./a/";
    "/./a/."; "/./a/.."; "/./a/b"; "/..//"; "/..//."; "/..//.."; "/..//a"; "/.././"; "/.././.";
    "/.././.."; "/.././a"; "/../../"; "/../../."; "/../../.."; "/../../a"; "/../a/"; "/../a/.";
    "/../a/.."; "/../a/b"; "/a//"; "/a//."; "/a//.."; "/a//b"; "/a/./"; "/a/./."; "/a/./..";
    "/a/./b"; "/a/../"; "/a/../."; "/a/../.."; "/a/../b"; "/a/b/"; "/a/b/."; "/a/b/.."; "/a/b/c";
    ".///"; ".///."; ".///.."; ".///a"; ".//./"; ".//./."; ".//./.."; ".//./a"; ".//../"; ".//../.";
    ".//../.."; ".//../a"; ".//a/"; ".//a/."; ".//a/.."; ".//a/b"; "././/"; "././/."; "././/..";
    "././/a"; "./././"; "./././."; "./././.."; "./././a"; "././../"; "././../."; "././../..";
    "././../a"; "././a/"; "././a/."; "././a/.."; "././a/b"; "./..//"; "./..//."; "./..//..";
    "./..//a"; "./.././"; "./.././."; "./.././.."; "./.././a"; "./../../"; "./../../.";
    "./../../.."; "./../../a"; "./../a/"; "./../a/."; "./../a/.."; "./../a/b"; "./a//"; "./a//.";
    "./a//.."; "./a//b"; "./a/./"; "./a/./."; "./a/./.."; "./a/./b"; "./a/../"; "./a/../.";
    "./a/../.."; "./a/../b"; "./a/b/"; "./a/b/."; "./a/b/.."; "./a/b/c"; "..///"; "..///.";
    "..///.."; "..///a"; "..//./"; "..//./."; "..//./.."; "..//./a"; "..//../"; "..//../.";
    "..//../.."; "..//../a"; "..//a/"; "..//a/."; "..//a/.."; "..//a/b"; ".././/"; ".././/.";
    ".././/.."; ".././/a"; "../././"; "../././."; "../././.."; "../././a"; ".././../"; ".././../.";
    ".././../.."; ".././../a"; ".././a/"; ".././a/."; ".././a/.."; ".././a/b"; "../..//";
    "../..//."; "../..//.."; "../..//a"; "../.././"; "../.././."; "../.././.."; "../.././a";
    "../../../"; "../../../."; "../../../.."; "../../../a"; "../../a/"; "../../a/."; "../../a/..";
    "../../a/b"; "../a//"; "../a//."; "../a//.."; "../a//b"; "../a/./"; "../a/./."; "../a/./..";
    "../a/./b"; "../a/../"; "../a/../."; "../a/../.."; "../a/../b"; "../a/b/"; "../a/b/.";
    "../a/b/.."; "../a/b/c"; "a///"; "a///."; "a///.."; "a///b"; "a//./"; "a//./."; "a//./..";
    "a//./b"; "a//../"; "a//../."; "a//../.."; "a//../b"; "a//b/"; "a//b/."; "a//b/.."; "a//b/c";
    "a/.//"; "a/.//."; "a/.//.."; "a/.//b"; "a/././"; "a/././."; "a/././.."; "a/././b"; "a/./../";
    "a/./../."; "a/./../.."; "a/./../b"; "a/./b/"; "a/./b/."; "a/./b/.."; "a/./b/c"; "a/..//";
    "a/..//."; "a/..//.."; "a/..//b"; "a/.././"; "a/.././."; "a/.././.."; "a/.././b"; "a/../../";
    "a/../../."; "a/../../.."; "a/../../b"; "a/../b/"; "a/../b/."; "a/../b/.."; "a/../b/c"; "a/b//";
    "a/b//."; "a/b//.."; "a/b//c"; "a/b/./"; "a/b/./."; "a/b/./.."; "a/b/./c"; "a/b/../";
    "a/b/../."; "a/b/../.."; "a/b/../c"; "a/b/c/"; "a/b/c/."; "a/b/c/.."; "a/b/c/d";
  ] ~f:(fun path_str ->
    let path = of_string path_str in
    File.Fmt.stdout
    |> Fmt.fmt "normalize " |> String.pp path_str

    |> Fmt.fmt "\n       -> " |> pp (normalize path)
    |> Fmt.fmt "\n" |> ignore
  )

let _ = test ()
