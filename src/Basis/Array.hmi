open Rudiments

type t 'a ^t: ^&t a = ^t&array a (* ^&array a is built in. *)

include ContainerCommonIntf.SPolyFold with type t 'a ^t: ^&t a := ^&t a

include FormattableIntf.SPoly with type t 'a ^t: ^&t a := ^&t a

`|Cursor that supports arbitrary array element access. All operations are O(1).
`
val Cursor: CursorIntf.SPoly

val hash_fold 'a: (a -> Hash.State.t -> Hash.State.t) -> _&t a -> Hash.State.t -> Hash.State.t
`|`hash_fold hash_fold_a t state` incorporates the hash of `t` into `state` and returns the
 |resulting state. Array elements are sequentially hash-folded into the resulting state via
 |`hash_fold_a`.
`

val cmp 'a: (a -> a -> Cmp.t) -> _&t a -> _&t a -> Cmp.t
`|Compare two arrays given the element comparison function. The array lengths may differ.
`

val Seq:
    type outer 'a ^outer: ^&outer a = ^outer&t a
    type SMono: SMono =
        type t ^t: ^&t
        type elm ^elm: ^&elm
        val to_array ^t ^outer ^elm: ^&t -> ^&outer ^&elm
    type SPoly: SPoly =
        type t 'a ^t: ^&t a
        type elm 'a: elm a
        val to_array 'a ^t ^outer: ^&t a -> ^&outer elm a

    `|Efficiently convert a sequence of fixed element type with known length to an array.
    `
    val makeMono: (T : SeqIntf.IMonoDef) -> SMono
      with type t ^t: ^&t := T.^&t
      with type elm ^elm: ^&elm := T.^&elm

    `|Efficiently convert a reversed sequence of fixed element type with known length to an array.
    `
    val makeMonoRev: (T : SeqIntf.IMonoDef) -> SMono
      with type t ^t: ^&t := T.^&t
      with type elm ^elm: ^&elm := T.^&elm
    ``Efficiently convert a generic sequence with known length to an array.``
    val makePoly: (T : SeqIntf.IPolyDef) -> SPoly
      with type t 'a ^t: ^&t a := T.^&t a
      with type elm a': elm a := T.elm a
    `|Efficiently convert a reversed generic sequence with known length to an array.
    `
    val makePolyRev: (T : SeqIntf.IPolyDef) -> SPoly
      with type t 'a ^t: ^&t a := T.^&t a
      with type elm 'a: elm a := T.elm a

val empty 'a ^t: ^&t a
`|The empty array, equivalent to `[||]`.
`

val init 'a ^t >e: range -> f:(uns >e-> a) >e-> ^&t a
`|Initialize array. `init range ~f:(fun i -> ...)` initializes an array of length `Range.length
 |range` using `~f` to map range elements to array elements.
`

val of_list 'a ^t: ?length:uns -> list a -> ^&t a
`|Initialize array using contents of list. If specified, `?length` must equal `(List.length list)`.
`

val of_list_rev 'a ^t: ?length:uns -> list a -> ^&t a
`|Initialize array using reversed contents of list. If specified, `?length` must equal `(List.length
 |list)`.
`

val length 'a: _&t a -> uns
``Return array length.``

val is_empty 'a: _&t a -> bool
``Return `true` if array length is 0; `false` otherwise.``

val get 'a: uns -> _&t a -> a
``Get array element. `get i t` returns the element at index `i`.``

val set_inplace 'a: uns -> a -> !&t a -> unit
`|Set array element in place (mutate). `set_inplace i elm t` sets the element at index `i` to `elm`.
`

val set 'a ^t: uns -> a -> _&t a -> ^&t a
`|Create a new array based on input array, differing in one element. `set t i elm` creates an array
 |equal to `t`, except that element `i` is initialized to `elm`.
`

val copy 'a ^t: _&t a -> ^&t a
``Create a copy of an array.``

val pare 'a ^t: range:range -> _&t a -> ^&t a
`|Create an array with contents initialized to equal the specified `range` of the input array.
`

val join 'a ^t: ?sep:_&t a -> _&t a list -> ^&t a
``Concatenate a list of arrays, with optional separator.``

val concat 'a ^t: _&t a -> _&t a -> ^&t a
``Concatenate two arrays.``

val append 'a ^t: a -> _&t a -> ^&t a
`|Create an array that is the concatenation of the input array and the input element.
`

val prepend 'a ^t: a -> _&t a -> ^&t a
`|Create an array that is the concatenation of the input element and the input
 |array.
`

val insert 'a ^t: uns -> a -> _&t a -> ^&t a
`|Create an array that is the concatenation of the bipartition of the input array at specified
 |index, with the input element interposed.
`

val remove 'a ^t: uns -> _&t a -> ^&t a
`|Create an array that is the concatenation of the first and third components of the tripartition
 |about the element at specified index.
`

val reduce 'a >e: f:(a -> a >e-> a) -> _&t a >e-> option a
`|Reduce the array to a single value, or return `None` if the array is empty. The reduction function
 |is assumed to be associative and commutative; thus reduction order is unspecified.
`

val reduce_hlt 'a >e: f:(a -> a >e-> a) -> _&t a >e-> a
`|Reduce the array to a single value, or halt if the array is empty. The reduction function is
 |assumed to be associative and commutative; thus reduction order is unspecified.
`

val swap_inplace 'a: uns -> uns -> !&t a -> unit
``Swap elements at given indices in place (mutate).``

val swap 'a ^t: uns -> uns -> _&t a -> ^&t a
`|Create an array based on the input array, but with elements at given indices swapped.
`

val rev_inplace 'a: !&t a -> unit
``Reverse array in place (mutate).``

val rev 'a ^t: _&t a -> ^&t a
``Create an array with contents reversed relative to the input array.``

val blit 'a: range -> _&t a -> range -> !&t a -> unit
`|Set a range of elements in place (mutate). `blit r0 t0 r1 t1` sets the elements of `t1` in the
 |range `r0` to equal the elements of `t0` in the range `r1`. Overlapping ranges are supported: `t0`
 |and `t1` may refer to the same or different arrays; `r0` and `r1` must have equal length, but they
 |may otherwise have arbitrary relationship.
`

val is_sorted 'a: ?strict:bool -> cmp:(a -> a -> Cmp.t) -> _&t a -> bool
`|Return true if array is sorted (strictly if `?strict` is `true`) according to the comparison
 |function.
`

val sort_inplace 'a >e: ?stable:bool -> cmp:(a -> a >e-> Cmp.t) -> !&t a >e-> unit
`|Sort the array in place (mutate) according to the comparison function. Preserve order of
 |equivalent elements if `?stable` is `true`.
`

val sort 'a ^t: ?stable:bool -> cmp:(a -> a -> Cmp.t) -> _&t a -> ^&t a
`|Create an array with sorted contents of the input array according to the comparison function.
 |Preserve order of equivalent elements if `?stable` is `true`.
`

val psearch 'a: ?range:range -> a -> cmp:(a -> a -> Cmp.t) -> _&t a -> option (Cmp.t, uns)
`|Binary search for key in array, selecting the leftmost match, and falling back to the predecessor
 |in the case of no match.
 |
 |Return:
 |
 |- No predecessor: `Some (Cmp.Lt, 0)`
 |- Leftmost match: `Some (Cmp.Eq, index)`
 |- Predecessor: `Some (Cmp.Gt, index)`
 |- Empty array: `None`}
`

val search 'a: ?range:range -> a -> cmp:(a -> a -> Cmp.t) -> _&t a -> option uns
`|Binary search for key in array. If key is found, return `(Some index)`, otherwise return `None`.
 |Note that if more than one element matches key, an arbitrary match is returned.
`

val nsearch 'a: ?range:range -> a -> cmp:(a -> a -> Cmp.t) -> _&t a -> option (Cmp.t, uns)
`|Binary search for key in array, selecting the rightmost match, and falling back to the successor.
 |
 |Return:
 |- Successor: `Some (Cmp.Lt, index)`
 |- Rightmost match: `Some (Cmp.Eq, index)`
 |- No successor: `Some (Cmp.Gt, (Uns.pred (length t)))`
 |- Empty array: `None`
`

val map 'a 'b ^t >e: f:(a >e-> b) -> _&t a >e-> ^&t b
`|Create an array with elements mapped from the input array, according to the element mapping
 |function.
`

val mapi 'a 'b ^t >e: f:(uns -> a >e-> b) -> _&t a >e-> ^&t b
`|Create an array with elements mapped from the input array, according to the indexed element
 |mapping function.
`

val fold_map 'accum 'a 'b ^t >e: init:accum -> f:(accum -> a >e-> (accum, b)) -> _&t a >e->
  (accum, ^&t b)
`|Create an array and accumulated result with elements mapped from the input array, according to the
 |folding mapping function.
`

val foldi_map 'accum 'a 'b ^t >e: init:accum -> f:(uns -> accum -> a >e-> (accum, b)) -> _&t a >e->
  (accum, ^&t b)
`|Create an array and accumulated result with elements mapped from the input array, according to the
 |indexed folding mapping function.
`

val filter 'a ^t >e: f:(a >e-> bool) -> _&t a >e-> ^&t a
`|Create an array with contents filtered by the given function. Only elements for which the filter
 |function returns true are incorporated in the result.
`

val filteri 'a ^t >e: f:(uns -> a >e-> bool) -> _&t a >e-> ^&t a
`|Create an array with contents filtered by the given function. Only elements for which the indexed
 |filter function returns true are incorporated in the result.
`

val fold2_until 'accum 'a 'b >e: init:accum -> f:(accum -> a -> b >e-> (accum, bool)) -> _&t a ->
  _&t b >e-> accum
`|Create an accumulated result for the paired elements of two arrays, calling the element folding
 |function in increasing index order, and terminate folding early if the folding function returns
 |true.
`

val foldi2_until 'accum 'a 'b >e: init:accum -> f:(uns -> accum -> a -> b >e-> (accum, bool)) -> _&t
  a -> _&t b >e-> accum
`|Create an accumulated result for the paired elements of two arrays, calling the indexed element
 |folding function in increasing index order, and terminate folding early if the folding function
 |returns true.
`

val fold2 'accum 'a 'b >e: init:accum -> f:(accum -> a -> b >e-> accum) -> _&t a -> _&t b >e-> accum
`|Create an accumulated result for the paired elements of two arrays, calling the element folding
 |function in increasing index order.
`

val foldi2 'accum 'a 'b >e: init:accum -> f:(uns -> accum -> a -> b >e-> accum) -> _&t a -> _&t b
  >e-> accum
`|Create an accumulated result for the paired elements of two arrays, calling the indexed element
 |folding function in increasing index order.
`

val iter2 'a 'b >e: f:(a -> b >e-> unit) -> _&t a -> _&t b >e-> unit
`|Iterate over the paired elements of two arrays, calling the element visiting function in
 |increasing index order.
`

val iteri2 'a 'b >e: f:(uns -> a -> b >e-> unit) -> _&t a -> _&t b >e-> unit
`|Iterate over the paired elements of two arrays, calling the indexed element visiting function in
 |increasing index order.
`

val map2 'a 'b 'c ^t >e: f:(a -> b >e-> c) -> _&t a -> _&t b >e-> ^&t c
`|Create an array with elements mapped by the element mapping function from the paired elements of
 |two input arrays.
`

val mapi2 'a 'b 'c ^t >e: f:(uns -> a -> b >e-> c) -> _&t a -> _&t b >e-> ^&t c
`|Create an array with elements mapped by the indexed element mapping function from the paired
 |elements of two input arrays.
`

val fold2_map 'accum 'a 'b 'c ^t >e: init:accum -> f:(accum -> a -> b >e-> (accum, c)) -> _&t a ->
  _&t b >e-> (accum, ^&t c)
`|Create an array and accumulated result based on the paired elements of two arrays, calling the
 |element folding/mapping function in increasing index order.
`

val foldi2_map 'accum 'a 'b 'c ^t >e: init:accum -> f:(uns -> accum -> a -> b >e-> (accum, c)) ->
  _&t a -> _&t b >e-> (accum, ^&t c)
`|Create an array and accumulated result based on the paired elements of two arrays, calling the
 |indexed element folding/mapping function in increasing index order.
`

val zip 'a 'b ^t: _&t a -> _&t b -> ^&t (a, b)
``Create an array with the paired elements of two arrays.``

val unzip 'a 'b ^ta ^tb: _&t (a, b) -> (^ta&t a, ^tb&t b)
``Create two arrays with the unpaired elements of the input pair array.``
