open Rudiments

module List = List0

module T = struct
    type 'a /t t = 'a /t array
    type 'a elm = 'a

    let get i t =
        %hemlock_array_get i t

    let length t =
        %hemlock_array_length t

    module Cursor = struct
        module T = struct
            type 'a /m container = 'a /m t
            type ('a, /m) t =
                array: 'a /m container
                index: uns

            (* val cmp: ('a, /m) t -> ('a, /m) t -> Cmp.t *)
            let cmp t0 t1 =
                Uns.cmp t0.index t1.index

            (* val hd: 'a /m container -> ('a, /m) t *)
            let hd array =
                {array; index=0}

            (* val tl: 'a /m container -> ('a, /m) t *)
            let tl array =
                {array; index=length array}

            (* val seek: sint -> ('a, /m) t -> ('a, /m) t *)
            let seek i t =
                match Sint.(i < 0i) with
                | true ->
                    match Uns.((of_sint Sint.(neg i)) > t.index) with
                    | true -> halt "Cannot seek before beginning of array"
                    | false -> {t with index=Uns.(t.index - of_sint (Sint.neg
                      i))}
                | false ->
                    match Uns.((t.index + (of_sint i)) > (length t.array)) with
                    | true -> halt "Cannot seek past end of array"
                    | false -> {t with index=t.index + (Uns.of_sint i)}

            (* val succ: ('a, /m) t -> ('a, /m) t *)
            let succ t =
                seek 1i t

            (* val pred: ('a, /m) t -> ('a, /m) t *)
            let pred t =
                seek (-1i) t

            (* val lget: ('a, _) t -> 'a *)
            let lget t =
                get (pred t.index) t.array

            (* val rget: ('a, _) t -> 'a *)
            let rget t =
                get t.index t.array

            (* val container: ('a, /m) t -> 'a /m container *)
            let container t =
                t.array

            (* val index: (_, _) t -> uns *)
            let index t =
                t.index
        include T
        include Cmpable.Make_poly(T)

    let cmp cmp_elm t0 t1 =
        let rec fn cursor0 cursor1 =
            match Cursor.(cursor0 = (tl t0)), Cursor.(cursor1 = (tl t1)) with
            | true, true -> Cmp.Eq
            | true, false -> Cmp.Lt
            | false, true -> Cmp.Gt
            | false, false ->
                match cmp_elm (Cursor.rget cursor0) (Cursor.rget cursor1) with
                | Cmp.Lt -> Cmp.Lt
                | Cmp.Eq -> fn (Cursor.succ cursor0) (Cursor.succ cursor1)
                | Cmp.Gt -> Cmp.Gt
          in
        fn (Cursor.hd t0) (Cursor.hd t1)
include T
include Container_common.Make_poly_fold(T)

let hash_fold hash_fold_a t state =
    fold t ~init:state ~f:(fun state elm -> state |> hash_fold_a elm)

module Seq = struct
    type 'a /t outer = 'a /t t
    module type S_mono = sig
        type /t t
        type /m elm
        val to_array: /t t -> /m elm /o outer
    module type S_poly = sig
        type 'a /t t
        type 'a elm
        val to_array: 'a /t t -> 'a elm /o outer

    module Make_mono (T : Seq_intf.I_mono_def) : S_mono
      with type /t t := /t T.t
      also type /m elm := /m T.elm = struct
        let to_array t =
            match T.length t with
            | 0 ->
                (* Optimization: use the same empty array for all types. *)
                [||]
            | l ->
                let rec fn t builder i =
                    match i = l with
                    | true -> %hemlock_array_build builder
                    | false ->
                        let elm, t' = T.next t in
                        %hemlock_array_gap_lput builder i elm
                        let i' = succ i in
                        fn t' builder i'
                  in
                fn t (%hemlock_array_alloc l) 0

    module Make_mono_rev (T : Seq_intf.I_mono_def) : S_mono
      with type /t t := /t T.t
      also type /m elm := /m T.elm = struct
        let to_array t =
            match T.length t with
            | 0 -> [||]
            | l ->
                let rec fn t builder i =
                    let elm, t' = T.next t in
                    %hemlock_array_gap_rput builder i elm
                    match i = 0 with
                    | true -> %hemlock_array_build builder
                    | false -> fn t' builder (pred i)
                  in
                fn t' (%hemlock_array_alloc l) (pred l)

    module Make_poly (T : Seq_intf.I_poly_def) : S_poly
      with type 'a /t t := 'a /t T.t
      also type 'a elm := 'a T.elm = struct
        let to_array t =
            match T.length t with
            | 0 -> (* Optimization: use the same empty array for all types. *)
              [||]
            | l ->
                let rec fn t builder i =
                    match i = l with
                    | true -> %hemlock_array_build builder
                    | false ->
                        let elm, t' = T.next t in
                        %hemlock_array_gap_lput builder i elm
                        let i' = succ i in
                        fn t' builder i'
                  in
                fn t (%hemlock_array_alloc l) 0

    module Make_poly_rev (T : Seq_intf.I_poly_def) : S_poly
      with type 'a /t t := 'a /t T.t
      also type 'a elm := 'a T.elm = struct
        let to_array t =
            match T.length t with
            | 0 -> [||]
            | l ->
                let rec fn t builder i =
                    let elm, t' = T.next t in
                    %hemlock_array_gap_rput builder i elm
                    match i = 0 with
                    | true -> %hemlock_array_build builder
                    | false -> fn t' builder (pred i)
                  in
                fn t' (%hemlock_array_alloc l) (pred l)

    (* Special-purpose, for fold[i]_map . *)
    module Make_poly2 (T : sig
        type ('a, 'b) ['accum] t
        val length: ('a, 'b) ['accum] t -> uns
        val next: ('a, 'b) ['accum] t -> 'accum -> 'b * ('a, 'b) ['accum] t *
          'accum
      ) : sig
        type ('a, 'b) ['accum] t
        val to_accum_array: ('a, 'b) ['accum] t -> init:'accum
          -> 'accum * 'b /o outer
      with type ('a, 'b) ['accum] t := ('a, 'b) ['accum] T.t = struct
        let to_accum_array t ~init =
            match T.length t with
            | 0 -> init, [||]
            | l ->
                let rec fn t accum builder i =
                    match i = l with
                    | true -> accum, (%hemlock_array_build builder)
                    | false ->
                        let elm, t', accum' = T.next t accum in
                        %hemlock_array_gap_lput builder i elm
                        let i' = succ i in
                        fn t' accum' builder i'
                  in
                fn t init (%hemlock_array_alloc l) 0

    (* Special-purpose, for fold[i]2_map . *)
    module Make_poly3 (T : sig
        type ('a, 'b) ['accum, 'c] t
        val length: ('a, 'b) ['accum, 'c] t -> uns
        val next: ('a, 'b) ['accum, 'c] t -> 'accum -> 'c * ('a, 'b) ['accum,
          'c] t * 'accum
      ) : sig
        type ('a, 'b) ['accum, 'c] t
        val to_accum_array: ('a, 'b) ['accum, 'c] t -> init:'accum -> 'accum *
          'c /o outer
      with type ('a, 'b) ['accum, 'c] t := ('a, 'b) ['accum, 'c] T.t = struct
        let to_accum_array t ~init =
            match T.length t with
            | 0 -> init, [||]
            | l ->
                let rec fn t accum builder i =
                    match i = l with
                    | true -> accum, (%hemlock_array_build builder)
                    | false ->
                        let elm, t', accum' = T.next t accum in
                        %hemlock_array_gap_lput builder i elm
                        let i' = succ i in
                        fn t' accum' builder i'
                  in
                fn t init (%hemlock_array_alloc l) 0

module Array_init = struct
    module T = struct
        type >e ['a] t =
            f      : uns >e-> 'a
            index  : uns
            length : uns
        type 'a elm = 'a

        (* val init: uns -> f:(uns >e-> 'a) >e-> >e ['a] t *)
        let init length ~f =
            {f; index=0; length}

        (* val length: _ [_] t -> uns *)
        let length t =
            t.length

        (* val next: >e ['a] t >e-> 'a * >e ['a] t *)
        let next t =
            let elm = t.f t.index in
            let t' = {t with index=(succ t.index)} in
            elm, t'
    include T
    include Seq.Make_poly(T)
    (* val to_array: >e ['a] t >e-> 'a /o outer *)

let init n ~f =
    Array_init.(to_array (init n ~f))

module Array_of_list_common = struct
    type 'a t =
        list: 'a list
        length: uns
    type 'a elm = 'a

    let init length list =
        {list; length}

    let length t =
        t.length

    let next t =
        match t.list with
        | [] -> not_reached ()
        | elm :: list' ->
            let t' = {t with list=list'} in
            elm, t'

module Array_of_list = struct
    include Array_of_list_common
    include Seq.Make_poly(Array_of_list_common)

module Array_of_list_rev = struct
    include Array_of_list_common
    include Seq.Make_poly_rev(Array_of_list_common)

let of_list ?length list =
    let length = match length with
        | None -> List.length list
        | Some length -> length
      in
    Array_of_list.to_array (Array_of_list.init length list)

let of_list_rev ?length list =
    let length = match length with
        | None -> List.length list
        | Some length -> length
      in
    Array_of_list_rev.to_array (Array_of_list_rev.init length list)

let is_empty t =
    (length t) = 0

let set_inplace i elm t =
    %hemlock_array_set_inplace i elm t

let copy t =
    init (length t) ~f:(fun i -> get i t)

let pare ~base ~past t =
    assert (base <= past)
    init (past - base) ~f:(fun i -> get (base + i) t)

let set i elm t =
    let t' = copy t in
    set_inplace i elm t'
    t'

module Array_join = struct
    module T = struct
        type 'a /t outer = 'a /t t
        type ('a, /sep, /arrays) t =
            sep: 'a /sep outer
            arrays: ('a /arrays outer) list
            length: uns
            in_sep: bool
            index: uns
        type 'a elm = 'a

        (* val init: uns -> 'a /sep outer -> 'a /arrays outer list
         *   -> ('a, /sep, /arrays) t *)
        let init length sep arrays =
            {sep; arrays; length; in_sep=false; index=0}

        (* val next: ('a, /sep, /arrays) t -> 'a * ('a, /sep, /arrays) t *)
        let next t =
            let rec fn t =
                match t.in_sep with
                | false ->
                    let array = List.hd t.arrays in
                    match t.index < length array with
                    | true ->
                        let elm = get t.index array in
                        let t' = {t with index=succ t.index} in
                        elm, t'
                    | false -> fn {t with
                        arrays=List.tl t.arrays
                        in_sep=true
                        index=0
                      }
                | true ->
                    match t.index < length t.sep with
                    | true ->
                        let elm = get t.index t.sep in
                        let t' = {t with index=succ t.index} in
                        elm, t'
                    | false -> fn {t with in_sep=false; index=0}
              in
            fn t

        let length t =
            t.length
    include T
    include Seq.Make_poly(T)
    (* val to_array: ('a, /_, /_) t -> 'a /o outer *)

let join ?sep tlist =
    let sep, sep_len = match sep with
        | None -> [||], 0
        | Some sep -> sep, length sep
      in
    let _, tlist_length = List.fold tlist ~init:(0, 0)
      ~f:(fun (i, accum) list ->
        let i' = succ i in
        let sep_len' = match i with
            | 0 -> 0
            | _ -> sep_len
          in
        let accum' = accum + sep_len' + (length list) in
        i', accum'
      ) in
    Array_join.(to_array (init tlist_length sep tlist))

let concat t0 t1 =
    let length_t0 = length t0 in
    let length_t1 = length t1 in
    let length = length_t0 + length_t1 in
    init length ~f:(fun i ->
        if i < length_t0 then get i t0
        else get (i - length_t0) t1
      )

let append elm t =
    let tlen = length t in
    init (succ tlen) ~f:(fun i ->
        if i < tlen then get i t
        else elm
      )

let prepend elm t =
    init (succ (length t)) ~f:(fun i ->
        if i = 0 then elm
        else get (pred i) t
      )

let insert i elm t =
    if i = 0 then
        prepend elm t
    else
        let len = length t in
        if i < len then
            init (succ len) ~f:(fun index ->
                match Uns.cmp index i with
                | Lt -> get index t
                | Eq -> elm
                | Gt -> get (pred index) t
              )
        else
            append elm t

let remove i t =
    let len = length t in
    assert (len > 0)
    match len with
    | 1 ->
        assert (i = 0)
        [||]
    | _ ->
        if i = 0 then
            pare ~base:1 ~past:len t
        else if i < len then
            init (pred len) ~f:(fun index ->
                if index < i then get index t
                else get (succ index) t
              )
        else
            pare ~base:0 ~past:(pred len) t

let reduce ~f t =
    let rec fn i accum =
        match (i = (length t)) with
        | true -> accum
        | false -> fn (succ i) (f accum (get i t))
      in
    match t with
    | [||] -> None
    | _ -> Some (fn 1 (get 0 t))

let reduce_hlt ~f t =
    match reduce ~f t with
    | None -> halt "Empty array"
    | Some x -> x

let swap_inplace i0 i1 t =
    let elm0 = get i0 t in
    let elm1 = get i1 t in
    set_inplace i0 elm1 t
    set_inplace i1 elm0 t

let swap i0 i1 t =
    let t' = copy t in
    swap_inplace i0 i1 t'
    t'

let rev_inplace t =
    let rec fn i0 i1 =
        match (i0 >= i1) with
        | true -> ()
        | false ->
            swap_inplace i0 i1 t
            fn (succ i0) (pred i1)
      in
    let len = length t in
    match len with
    | 0 -> ()
    | _ -> fn 0 (pred len)

let rev t =
    let l = length t in
    init l ~f:(fun i -> get (l - i - 1) t)

(* Used directly for non-overlapping blits. *)
let blit_ascending len i0 t0 i1 t1 =
    for i = 0 to pred len do
        set_inplace (i1 + i) (get (i0 + i) t0) t1
let blit_descending len i0 t0 i1 t1 =
    for i = pred len downto 0 do
        set_inplace (i1 + i) (get (i0 + i) t0) t1

let blit len i0 t0 i1 t1 =
    (* Choose direction such that overlapping ranges don't corrupt the source.
     *)
    match i0 < i1 with
    | true -> blit_descending len i0 t0 i1 t1
    | false -> blit_ascending len i0 t0 i1 t1

let is_sorted ?(strict=false) ~cmp t =
    let len = length t in
    let rec fn elm i =
        match i = len with
        | true -> true
        | false ->
            let elm' = get i t in
            match (cmp elm elm'), strict with
            | Cmp.Lt, _
            | Cmp.Eq, false -> fn elm' (succ i)
            | Cmp.Eq, true
            | Cmp.Gt, _ -> false
      in
    match len with
    | 0 -> true
    | _ -> fn (get 0 t) 1

type order =
    | Increasing
    | Decreasing
    | Either
type run =
    base: uns
    past: uns
let sort_impl ?(stable=false) ~cmp ~inplace t =
    (* Merge a pair of adjacent runs. Input runs may be in increasing or
     * decreasing order; the output is always in increasing order. *)
    let merge_pair ~cmp src run0 order0 run1 order1 dst =
        assert (run0.past = run1.base)
        let rblit len i0 t0 i1 t1 =
            for i = 0 to pred len do
                set_inplace (i1 + i) (get (i0 + len - (i + 1)) t0) t1
          in
        let merge_pair_oo ~cmp src run0 order0 run1 order1 dst =
            let rec fn ~cmp src run0 order0 run1 order1 dst run =
                match (run0.base = run0.past), (run1.base = run1.past) with
                | false, false ->
                    let elm0 = match order0 with
                        | Increasing -> get run0.base src
                        | Decreasing -> get (pred run0.past) src
                        | Either -> not_reached ()
                      in
                    let elm1 = match order1 with
                        | Increasing -> get run1.base src
                        | Decreasing -> get (pred run1.past) src
                        | Either -> not_reached ()
                      in
                    match cmp elm0 elm1 with
                    | Cmp.Lt
                    | Cmp.Eq ->
                        match order0 with
                        | Increasing ->
                            set_inplace run.past elm0 dst
                            let run0' = {run0 with base=succ run0.base} in
                            let run' = {run with past=succ run.past} in
                            fn ~cmp src run0' order0 run1 order1 dst run'
                        | Decreasing ->
                            set_inplace run.past elm0 dst
                            let run0' = {run0 with past=pred run0.past} in
                            let run' = {run with past=succ run.past} in
                            fn ~cmp src run0' order0 run1 order1 dst run'
                        | Either -> not_reached ()
                    | Cmp.Gt ->
                        match order1 with
                        | Increasing ->
                            set_inplace run.past elm1 dst
                            let run1' = {run1 with base=succ run1.base} in
                            let run' = {run with past=succ run.past} in
                            fn ~cmp src run0 order0 run1' order1 dst run'
                        | Decreasing ->
                            set_inplace run.past elm1 dst
                            let run1' = {run1 with past=pred run1.past} in
                            let run' = {run with past=succ run.past} in
                            fn ~cmp src run0 order0 run1' order1 dst run'
                        | Either -> not_reached ()
                | true, false ->
                    let len = run1.past - run1.base in
                    let () = match order1 with
                        | Increasing ->
                          blit_ascending len run1.base src run.past dst
                        | Decreasing -> rblit len run1.base src run.past dst
                        | Either -> not_reached ()
                      in
                    {run with past=run.past + len}
                | false, true ->
                    let len = run0.past - run0.base in
                    let () = match order0 with
                        | Increasing ->
                          blit_ascending len run0.base src run.past dst
                        | Decreasing -> rblit len run0.base src run.past dst
                        | Either -> not_reached ()
                      in
                    {run with past=run.past + len}
                | true, true -> not_reached ()
              in
            fn ~cmp src run0 order0 run1 order1 dst {base=run0.base;
              past=run0.base}
          in
        let order0', order1' = match order0, order1 with
            | Increasing, Increasing
            | Increasing, Either
            | Either, Increasing
            | Either, Either -> Increasing, Increasing
            | Increasing, Decreasing -> Increasing, Decreasing
            | Decreasing, Increasing -> Decreasing, Increasing
            | Decreasing, Decreasing
            | Decreasing, Either
            | Either, Decreasing -> Decreasing, Decreasing
          in
        merge_pair_oo ~cmp src run0 order0' run1 order1' dst
      in
    (* Select monotonic runs and merge run pairs. *)
    let rec select ~stable ~cmp elm base i order run0_opt order0 src dst runs =
        match i = (length src) with
        | true ->
            let run0, order0, run1, order1 = match run0_opt with
                | None ->
                    (* Copy odd run. *)
                    let run0 = {base; past=i} in
                    let run1 = {base=i; past=i} in
                    run0, order, run1, Increasing
                | Some run0 -> run0, order0, {base; past=i}, order
              in
            let run = merge_pair ~cmp src run0 order0 run1 order1 dst in
            run :: runs
        | false ->
            let elm' = get i src in
            let i' = succ i in
            match cmp elm elm', order, stable with
            | Cmp.Lt, Either, _ -> select ~stable ~cmp elm' base i' Increasing
              run0_opt order0 src dst runs
            | Cmp.Gt, Either, _ -> select ~stable ~cmp elm' base i' Decreasing
              run0_opt order0 src dst runs
            | Cmp.Lt, Increasing, _
            | Cmp.Eq, Increasing, true
            | Cmp.Eq, Either, true -> select ~stable ~cmp elm' base i'
              Increasing run0_opt order0 src dst runs
            | Cmp.Eq, _, false
            | Cmp.Gt, Decreasing, _ -> select ~stable ~cmp elm' base i' order
              run0_opt order0 src dst runs
            | Cmp.Lt, Decreasing, _
            | Cmp.Eq, Decreasing, true
            | Cmp.Gt, Increasing, _ ->
                let run0_opt', order0', runs' = match run0_opt with
                    | None -> Some {base; past=i}, order, runs
                    | Some run0 ->
                        let run1 = {base; past=i} in
                        let run = merge_pair ~cmp src run0 order0 run1 order dst
                          in
                        None, Either, (run :: runs)
                  in
                select ~stable ~cmp elm' i i' Either run0_opt' order0' src dst
                  runs'
      in
    let aux = copy t in
    let runs = match t with
        | [||] -> [{base=0; past=0}]
        | _ -> select ~stable ~cmp (get 0 t) 0 1 Either None Either t aux []
      in

    (* Repeatedly sweep through runs and merge pairs until only one run remains.
     * Take care to read/write linearly up/down based on the sweep direction, in
     * order to improve cache locality. *)
    let rec merge ~cmp ~inplace src to_merge up dst merged =
        match to_merge, up, merged with
        | run0 :: run1 :: to_merge', true, _
        | run1 :: run0 :: to_merge', false, _ ->
            let run = merge_pair ~cmp src run0 Increasing run1 Increasing dst in
            merge ~cmp ~inplace src to_merge' up dst (run :: merged)
        | [], _, _ :: _ :: _ ->
            (* Start another sweep. *)
            merge ~cmp ~inplace dst merged (not up) src []
        | run :: [], false, _ ->
            (* Copy odd run to dst, then start another sweep. *)
            blit_descending (run.past - run.base) run.base src run.base dst
            merge ~cmp ~inplace dst (run :: merged) (not up) src []
        | run :: [], true, _ :: _ ->
            (* Copy odd run to dst, then start another sweep. *)
            blit_ascending (run.past - run.base) run.base src run.base dst
            merge ~cmp ~inplace dst (run :: merged) (not up) src []
        | [], true, _ :: []
        | _ :: [], true, [] ->
            match inplace with
            | true ->
                (* Odd number of sweeps performed; copy result back into t. *)
                blit_ascending (length dst) 0 dst 0 src
                src
            | false -> dst
        | [], false, _ :: [] -> dst
        | [], _, [] -> not_reached ()
      in
    merge ~cmp ~inplace aux runs false t []

let sort_inplace ?stable ~cmp t =
    let _ = sort_impl ?stable ~cmp ~inplace:true t in
    ()

let sort ?stable ~cmp t =
    sort_impl ?stable ~cmp ~inplace:false (copy t)

let search_impl ?base ?past key ~cmp mode t =
    let base = match base with
        | None -> 0
        | Some base -> base
      in
    let past = match past with
        | None -> length t
        | Some past -> past
      in
    assert (base <= past)
    assert (past <= length t)
    let rec fn ~base ~past =
        assert (base <= past)
        match (base = past) with
        | true ->
            (* Empty range. *)
            match mode with
            | Cmp.Lt ->
                match (base = 0), (base = (length t)) with
                | true, true -> None (* Empty; key < elms. *)
                | _, false -> (* At beginning, or interior. *)
                    match cmp key (get base t) with
                    | Cmp.Lt -> (* At successor. *)
                        match base = 0 with
                        | true ->
                            (* At beginning; key < elms. *)
                            Some (Cmp.Lt, 0)
                        | false ->
                            (* In interior; key > predecessor. *)
                            Some (Cmp.Gt, pred base
                    | Cmp.Eq ->
                        (* base at leftmost match. *)
                        Some (Cmp.Eq, base)
                    | Cmp.Gt -> not_reached ()
                | false, true ->
                    Some (Cmp.Gt, pred base) (* Past end; key > elms. *)
            | Cmp.Eq -> None (* No match. *)
            | Cmp.Gt ->
                match (base = 0), (base = (length t)) with
                | true, true -> None (* Empty; key > elms. *)
                | true, false ->
                    Some (Cmp.Lt, 0) (* At beginning; key < elms. *)
                | false, _ -> (* In interior, or past end. *)
                    let probe = pred base in
                    match cmp key (get probe t) with
                    | Cmp.Lt -> not_reached ()
                    | Cmp.Eq ->
                        Some (Cmp.Eq, probe) (* probe at rightmost match. *)
                    | Cmp.Gt ->
                        match (base = (length t)) with
                        | false ->
                            (* In interior; key < * successor. *)
                            Some (Cmp.Lt, base)
                        | true ->
                            Some (Cmp.Gt, probe) (* Past end; key > elms. *)
        | false ->
            let mid = (base + past) / 2 in
            match (cmp key (get mid t)), mode with
            | Cmp.Lt, _
            | Cmp.Eq, Cmp.Lt -> fn ~base ~past:mid
            | Cmp.Eq, Cmp.Eq -> Some (Cmp.Eq, mid)
            | Cmp.Eq, Cmp.Gt
            | Cmp.Gt, _ -> fn ~base:(succ mid) ~past
      in
    fn ~base ~past

let psearch ?base ?past key ~cmp t =
    search_impl ?base ?past key ~cmp Cmp.Lt t

let search ?base ?past key ~cmp t =
    match search_impl ?base ?past key ~cmp Cmp.Eq t with
    | Some (_, i) -> Some i
    | _ -> None

let nsearch ?base ?past key ~cmp t =
    search_impl ?base ?past key ~cmp Cmp.Gt t

let map ~f t =
    init (length t) ~f:(fun i -> f (get i t))

let mapi ~f t =
    init (length t) ~f:(fun i -> f i (get i t))

module Array_foldi_map = struct
    module T = struct
        type 'a /t outer = 'a /t t
        type ('a, /arr, >e) ['accum, 'b] t =
            arr: 'a /arr outer
            f: uns -> 'accum -> 'a >e-> 'accum * 'b
            index: uns
            length: uns
        (* val init: 'a /arr outer -> (uns -> 'accum -> 'a >e-> 'accum * 'b)
         *   -> uns -> ('a, /arr, >e) ['accum, 'b] t *)
        let init arr ~f length =
            {arr; f; length; index=0}

        (* val length: (_, _, _) [_, _] t -> uns *)
        let length t =
            t.length

        (* val next: ('a, /arr, >e) ['accum, 'b] t
         *   >e-> 'a * ('a, /arr, >e) ['accum, 'b] t * 'accum *)
        let next t accum =
            let accum', elm' = t.f t.index accum (get t.index t.arr) in
            let t' = {t with index=succ t.index} in
            elm', t', accum'
    include T
    include Seq.Make_poly2(T)
    (* val to_accum_array: (_, /_, >e) ['accum, 'b] t >e-> 'accum * 'b /o outer
     *)

let fold_map t ~init ~f =
    Array_foldi_map.to_accum_array (Array_foldi_map.init t
      ~f:(fun _ accum elm -> f accum elm) (length t)) ~init

let foldi_map t ~init ~f =
    Array_foldi_map.to_accum_array (Array_foldi_map.init t ~f (length t)) ~init

let filter ~f t =
    let _, t' = Array_foldi_map.to_accum_array
      (Array_foldi_map.init t ~f:(fun _ i _ ->
        let rec fn i elm =
            let i' = succ i in
            match f elm with
            | true -> i', elm
            | false -> fn i' (get i' t)
          in
         fn i (get i t)
      ) (count ~f t)) ~init:0 in
    t'

let filteri ~f t =
    let n = foldi t ~init:0 ~f:(fun i accum elm ->
        match f i elm with
        | false -> accum
        | true -> succ accum
      ) in
    let _, t' = Array_foldi_map.to_accum_array
      Array_foldi_map.init t ~f:(fun _ i _ ->
        let rec fn i elm =
            let i' = succ i in
            match f i elm with
            | true -> i', elm
            | false -> fn i' (get i' t)
          in
        fn i (get i t)
      ) n
      ~init:0 in
    t'

let foldi2_until ~init ~f t0 t1 =
    assert ((length t0) = (length t1))
    let len = length t0 in
    let rec fn i accum =
        match i = len with
        | true -> accum
        | false ->
            let accum', until = f i accum (get i t0) (get i t1) in
            match until with
            | true -> accum'
            | false -> fn (succ i) accum'
      in
    fn 0 init

let fold2_until ~init ~f t0 t1 =
    foldi2_until ~init ~f:(fun _ accum a b -> f accum a b) t0 t1

let fold2 ~init ~f t0 t1 =
    fold2_until ~init ~f:(fun accum a b -> (f accum a b), false) t0 t1

let foldi2 ~init ~f t0 t1 =
    foldi2_until ~init ~f:(fun i accum a b -> (f i accum a b), false) t0 t1

let iter2 ~f t0 t1 =
    assert ((length t0) = (length t1))
    for i = 0 to pred (length t0) do
        f (get i t0) (get i t1)

let iteri2 ~f t0 t1 =
    assert ((length t0) = (length t1))
    for i = 0 to pred (length t0) do
        f i (get i t0) (get i t1)

let map2 ~f t0 t1 =
    assert ((length t0) = (length t1))
    init (length t0) ~f:(fun i -> f (get i t0) (get i t1))

let mapi2 ~f t0 t1 =
    assert ((length t0) = (length t1))
    init (length t0) ~f:(fun i -> f i (get i t0) (get i t1))

module Array_foldi2_map = struct
    module T = struct
        type 'a /t outer = 'a /t t
        type ('a, /m, 'b, /n, >e) ['accum, 'c] t =
            arr0: 'a /m outer
            arr1: 'b /n outer
            f: uns -> 'accum -> 'a -> 'b >e-> 'accum * 'c
            index: uns

        (* val init: 'a /m outer -> 'b /n outer
         *   -> f:(uns -> 'accum -> 'a -> 'b -> >e-> 'accum * 'c)
         *   -> ('a, /m, 'b, /n, >e) ['accum, 'c] t *)
        let init arr0 arr1 ~f =
            {arr0; arr1; f; index=0}

        (* val length: (_, _, _, _, _) [_, _] t -> uns *)
        let length t =
            length t.arr0

        (* val next: ('a, /m, 'b, /n, >e) ['accum, 'c] t -> 'accum
         *   -> 'c * ('a, /m, 'b, /n, >e) ['accum, 'c] t * 'accum *)
        let next t accum =
            let accum', elm' = t.f t.index accum (get t.index t.arr0)
              (get t.index t.arr1) in
            let t' = {t with index=Uns.succ t.index} in
            elm', t', accum'
    include T
    include Seq.Make_poly3(T)

let fold2_map ~init ~f t0 t1 =
        Array_foldi2_map.to_accum_array (Array_foldi2_map.init t0 t1 ~f:(fun _
          accum elm -> f accum elm)) ~init

let foldi2_map ~init ~f t0 t1 =
        Array_foldi2_map.to_accum_array (Array_foldi2_map.init t0 t1 ~f) ~init

let zip t0 t1 =
    map2 ~f:(fun a b -> a, b) t0 t1

let unzip t =
    let t0 = map ~f:(fun (a, _) -> a) t in
    let t1 = map ~f:(fun (_, b) -> b) t in
    t0, t1

let pp pp_elm ppf t =
    let open Format in
    fprintf ppf "@[<h>[|";
    iteri t ~f:(fun i elm ->
        if i > 0 then fprintf ppf ";@ "
        fprintf ppf "%a" pp_elm elm
      )
    fprintf ppf "|]@]"

(*******************************************************************************
 * Begin tests.
 *)

let%expect_test "cursor" =
    let open Format in
    let rec fn arr hd cursor tl =
        let index = Cursor.index cursor in
        printf "index=%a" Uns.pp index
        printf ", container %a arr"
          Cmp.pp (cmp Uns.cmp (Cursor.container cursor) arr)
        let hd_cursor = Cursor.cmp hd cursor in
        printf ", hd %a cursor" Cmp.pp hd_cursor
        let cursor_tl = Cursor.cmp cursor tl in
        printf ", cursor %a tl" Cmp.pp cursor_tl
        let () = match hd_cursor with
            | Lt -> printf ", lget=%a" Uns.pp (Cursor.lget cursor)
            | Eq -> printf ", lget=_"
            | Gt -> not_reached ()
          in
        let () = match cursor_tl with
            | Lt -> printf ", rget=%a" Uns.pp (Cursor.rget cursor)
            | Eq -> printf ", rget=_"
            | Gt -> not_reached ()
          in
        printf "\n"

        let length = length arr in
        assert (Cursor.(=) (Cursor.seek (Uns.to_sint index) hd) cursor)
        assert (Cursor.(=) hd (Cursor.seek (-(Uns.to_sint index)) cursor))
        assert (Cursor.(=) (Cursor.seek (Uns.to_sint (length - index)) cursor)
          tl)
        assert (Cursor.(=) cursor (Cursor.seek (-(Uns.to_sint (length - index)))
          tl))

        match cursor_tl with
        | Lt ->
            let cursor' = Cursor.succ cursor in
            assert Cursor.(cursor = (pred cursor'))
            fn arr hd cursor' tl
        | Eq | Gt -> ()
      in
    let arrs = [
        [||]
        [|0|]
        [|0; 1|]
        [|0; 1; 2|]
      ] in
    printf "@[<h>"
    List.iter arrs ~f:(fun arr ->
        printf "--- %a ---\n" (pp Uns.pp) arr
        let hd = Cursor.hd arr in
        fn arr hd hd (Cursor.tl arr)
      )
    printf "@]"

    [%expect{"\
--- [||] ---
index=0, container Eq arr, hd Eq cursor, cursor Eq tl, lget=_, rget=_
--- [|0|] ---
index=0, container Eq arr, hd Eq cursor, cursor Lt tl, lget=_, rget=0
index=1, container Eq arr, hd Lt cursor, cursor Eq tl, lget=0, rget=_
--- [|0; 1|] ---
index=0, container Eq arr, hd Eq cursor, cursor Lt tl, lget=_, rget=0
index=1, container Eq arr, hd Lt cursor, cursor Lt tl, lget=0, rget=1
index=2, container Eq arr, hd Lt cursor, cursor Eq tl, lget=1, rget=_
--- [|0; 1; 2|] ---
index=0, container Eq arr, hd Eq cursor, cursor Lt tl, lget=_, rget=0
index=1, container Eq arr, hd Lt cursor, cursor Lt tl, lget=0, rget=1
index=2, container Eq arr, hd Lt cursor, cursor Lt tl, lget=1, rget=2
index=3, container Eq arr, hd Lt cursor, cursor Eq tl, lget=2, rget=_
"}]

let%expect_test "hash_fold" =
    let open Format in
    printf "@[<h>"
    let rec fn arrs =
        match arrs with
        | [] -> ()
        | arr :: arrs' ->
            printf "hash_fold %a -> %a\n" (pp Uns.pp) arr Hash.pp
              (Hash.t_of_state (hash_fold Uns.hash_fold arr Hash.State.empty))
            fn arrs'
      in
    let arrs = [
        [||]
        [|0|]
        [|0; 0|]
        [|0; 1|]
      ] in
    fn arrs
    printf "@]"

    [%expect{|hash_fold [||] -> 0x0000000000000000
             |hash_fold [|0|] -> 0x0000000007be548a
             |hash_fold [|0; 0|] -> 0x0000000012cbe18f
             |hash_fold [|0; 1|] -> 0x0000000005e8da31
             |}]

let%expect_test "cmp" =
    let open Format in
    let arrs = [
        [||]
        [|0|]
        [|0; 0|]
        [|0; 1|]
        [|0; 0|]
        [|0|]
        [||]
      ] in
    let rec fn arr arrs =
        match arrs with
        | [] -> ()
        | hd :: tl ->
            let () = List.iter arrs ~f:(fun arr2 ->
                printf "cmp %a %a -> %a\n" (pp Uns.pp) arr (pp Uns.pp) arr2
                  Cmp.pp (cmp Uns.cmp arr arr2)
              ) in
            fn hd tl
      in
    let hd, tl = match arrs with
        | hd :: tl -> hd, tl
        | [] -> not_reached ()
      in
    printf "@[<h>"
    fn hd tl
    printf "@]"

    [%expect{|cmp [||] [|0|] -> Lt
             |cmp [||] [|0; 0|] -> Lt
             |cmp [||] [|0; 1|] -> Lt
             |cmp [||] [|0; 0|] -> Lt
             |cmp [||] [|0|] -> Lt
             |cmp [||] [||] -> Eq
             |cmp [|0|] [|0; 0|] -> Lt
             |cmp [|0|] [|0; 1|] -> Lt
             |cmp [|0|] [|0; 0|] -> Lt
             |cmp [|0|] [|0|] -> Eq
             |cmp [|0|] [||] -> Gt
             |cmp [|0; 0|] [|0; 1|] -> Lt
             |cmp [|0; 0|] [|0; 0|] -> Eq
             |cmp [|0; 0|] [|0|] -> Gt
             |cmp [|0; 0|] [||] -> Gt
             |cmp [|0; 1|] [|0; 0|] -> Gt
             |cmp [|0; 1|] [|0|] -> Gt
             |cmp [|0; 1|] [||] -> Gt
             |cmp [|0; 0|] [|0|] -> Gt
             |cmp [|0; 0|] [||] -> Gt
             |cmp [|0|] [||] -> Gt
             |}]

let%expect_test "get,length,is_empty" =
    let open Format in
    let test_length arr =
        printf "%a: length=%a, is_empty=%B\n" (pp Uns.pp) arr Uns.pp (length
          arr) (is_empty arr)
      in
    printf "@[<h>"
    test_length [||]
    test_length [|0|]
    test_length [|0; 1|]
    test_length [|0; 1; 2|]
    printf "@]"

    [%expect{|[||]: length=0, is_empty=true
             |[|0|]: length=1, is_empty=false
             |[|0; 1|]: length=2, is_empty=false
             |[|0; 1; 2|]: length=3, is_empty=false
             |}]

let%expect_test "set,set_inplace" =
    let open Format in
    let test_set len =
        for i = 0 to pred len do
            let arr = init len ~f:(fun _ -> 0) in
            let arr' = set i 1 arr in
            printf "set %a: %a -> %a" Uns.pp i \
                                      (pp Uns.pp) arr \
                                      (pp Uns.pp) arr'
            set_inplace i 1 arr
            printf " -> set_inplace: %a" (pp Uns.pp) arr
            let arr'' = copy arr in
            printf " -> copy,set_inplace: %a" (pp Uns.pp) arr''
            set_inplace i 2 arr''
            printf " -> %a\n" (pp Uns.pp) arr''
      in
    printf "@[<h>"
    test_set 1
    test_set 2
    test_set 3
    printf "@]"

    [%expect{"\
set 0: [|0|] -> [|1|] -> set_inplace: [|1|] -> copy,set_inplace: [|1|] -> [|2|]
set 0: [|0; 0|] -> [|1; 0|] -> set_inplace: [|1; 0|] -> copy,set_inplace: [|1; 0|] -> [|2; 0|]
set 1: [|0; 0|] -> [|0; 1|] -> set_inplace: [|0; 1|] -> copy,set_inplace: [|0; 1|] -> [|0; 2|]
set 0: [|0; 0; 0|] -> [|1; 0; 0|] -> set_inplace: [|1; 0; 0|] -> copy,set_inplace: [|1; 0; 0|] -> [|2; 0; 0|]
set 1: [|0; 0; 0|] -> [|0; 1; 0|] -> set_inplace: [|0; 1; 0|] -> copy,set_inplace: [|0; 1; 0|] -> [|0; 2; 0|]
set 2: [|0; 0; 0|] -> [|0; 0; 1|] -> set_inplace: [|0; 0; 1|] -> copy,set_inplace: [|0; 0; 1|] -> [|0; 0; 2|]
"}]

let%expect_test "pare" =
    let open Format in
    let test arr =
        printf "pare %a ->" (pp Uns.pp) arr
        for i = 0 to length arr do
            for j = i to length arr do
                let arr' = pare arr ~base:i ~past:j in
                printf " [%a,%a)=%a" Uns.pp i Uns.pp j (pp Uns.pp) arr'
        printf "\n"
      in
    printf "@[<h>"
    test [||]
    test [|0|]
    test [|0; 1|]
    test [|0; 1; 2|]
    printf "@]"

    [%expect{|pare [||] -> [0,0)=[||]
             |pare [|0|] -> [0,0)=[||] [0,1)=[|0|] [1,1)=[||]
             |pare [|0; 1|] -> [0,0)=[||] [0,1)=[|0|] [0,2)=[|0; 1|] [1,1)=[||] [1,2)=[|1|] [2,2)=[||]
             |pare [|0; 1; 2|] -> [0,0)=[||] [0,1)=[|0|] [0,2)=[|0; 1|] [0,3)=[|0; 1; 2|] [1,1)=[||] [1,2)=[|1|] [1,3)=[|1; 2|] [2,2)=[||] [2,3)=[|2|] [3,3)=[||]
             |}]

let%expect_test "join" =
    let open Format in
    let test ?sep arrs =
        printf "join"
        let () = match sep with
            | None -> ()
            | Some sep -> printf " ~sep:%a" (pp Uns.pp) sep
          in
        printf " %a -> %a\n" (List.pp (pp Uns.pp)) arrs (pp Uns.pp) (join ?sep
          arrs)
      in
    printf "@[<h>"
    test []
    test [[||]]
    test [[||]; [||]]
    test [[||]; [||]; [||]]

    test [[|0|]]

    test [[|0|]; [||]]
    test [[||]; [|0|]]
    test [[|0|]; [|1|]]

    test [[|0|]; [||]; [||]]
    test [[||]; [|0|]; [||]]
    test [[||]; [||]; [|0|]]
    test [[|0|]; [|1|]; [||]]
    test [[|0|]; [||]; [|1|]]
    test [[|0|]; [|1|]; [|2|]]

    test ~sep:[|3|] []
    test ~sep:[|3|] [[||]]
    test ~sep:[|3|] [[||]; [||]]
    test ~sep:[|3|] [[||]; [||]; [||]]

    test ~sep:[|3|] [[|0|]]

    test ~sep:[|3|] [[|0|]; [||]]
    test ~sep:[|3|] [[||]; [|0|]]
    test ~sep:[|3|] [[|0|]; [|1|]]

    test ~sep:[|3|] [[|0|]; [||]; [||]]
    test ~sep:[|3|] [[||]; [|0|]; [||]]
    test ~sep:[|3|] [[||]; [||]; [|0|]]
    test ~sep:[|3|] [[|0|]; [|1|]; [||]]
    test ~sep:[|3|] [[|0|]; [||]; [|1|]]
    test ~sep:[|3|] [[|0|]; [|1|]; [|2|]]
    printf "@]";

    [%expect{|join [] -> [||]
             |join [[||]] -> [||]
             |join [[||]; [||]] -> [||]
             |join [[||]; [||]; [||]] -> [||]
             |join [[|0|]] -> [|0|]
             |join [[|0|]; [||]] -> [|0|]
             |join [[||]; [|0|]] -> [|0|]
             |join [[|0|]; [|1|]] -> [|0; 1|]
             |join [[|0|]; [||]; [||]] -> [|0|]
             |join [[||]; [|0|]; [||]] -> [|0|]
             |join [[||]; [||]; [|0|]] -> [|0|]
             |join [[|0|]; [|1|]; [||]] -> [|0; 1|]
             |join [[|0|]; [||]; [|1|]] -> [|0; 1|]
             |join [[|0|]; [|1|]; [|2|]] -> [|0; 1; 2|]
             |join ~sep:[|3|] [] -> [||]
             |join ~sep:[|3|] [[||]] -> [||]
             |join ~sep:[|3|] [[||]; [||]] -> [|3|]
             |join ~sep:[|3|] [[||]; [||]; [||]] -> [|3; 3|]
             |join ~sep:[|3|] [[|0|]] -> [|0|]
             |join ~sep:[|3|] [[|0|]; [||]] -> [|0; 3|]
             |join ~sep:[|3|] [[||]; [|0|]] -> [|3; 0|]
             |join ~sep:[|3|] [[|0|]; [|1|]] -> [|0; 3; 1|]
             |join ~sep:[|3|] [[|0|]; [||]; [||]] -> [|0; 3; 3|]
             |join ~sep:[|3|] [[||]; [|0|]; [||]] -> [|3; 0; 3|]
             |join ~sep:[|3|] [[||]; [||]; [|0|]] -> [|3; 3; 0|]
             |join ~sep:[|3|] [[|0|]; [|1|]; [||]] -> [|0; 3; 1; 3|]
             |join ~sep:[|3|] [[|0|]; [||]; [|1|]] -> [|0; 3; 3; 1|]
             |join ~sep:[|3|] [[|0|]; [|1|]; [|2|]] -> [|0; 3; 1; 3; 2|]
             |}]

let%expect_test "concat" =
    let open Format in
    let test arr0 arr1 =
        printf "concat %a %a -> %a\n" (pp Uns.pp) arr0 (pp Uns.pp) arr1 (pp
          Uns.pp) (concat arr0 arr1)
      in
    printf "@[<h>"
    test [||] [||]
    test [|0|] [||]
    test [||] [|0|]
    test [|0|] [|1|]
    test [|0; 1|] [|2|]
    test [|0|] [|1; 2|]
    test [|0; 1|] [|2; 3|]
    printf "@]"

    [%expect{|concat [||] [||] -> [||]
             |concat [|0|] [||] -> [|0|]
             |concat [||] [|0|] -> [|0|]
             |concat [|0|] [|1|] -> [|0; 1|]
             |concat [|0; 1|] [|2|] -> [|0; 1; 2|]
             |concat [|0|] [|1; 2|] -> [|0; 1; 2|]
             |concat [|0; 1|] [|2; 3|] -> [|0; 1; 2; 3|]
             |}]

let%expect_test "append,prepend" =
    let open Format in
    let test arr x =
        let arr_x = append x arr in
        let x_arr = prepend x arr in
        printf "%a %a: append -> %a, prepend -> %a\n" (pp Uns.pp) arr Uns.pp x
          (pp Uns.pp) arr_x (pp Uns.pp) x_arr
      in
    printf "@[<h>"
    test [||] 0
    test [|0|] 1
    test [|0; 1|] 2
    test [|0; 1; 2|] 3
    printf "@]"

    [%expect{|[||] 0: append -> [|0|], prepend -> [|0|]
             |[|0|] 1: append -> [|0; 1|], prepend -> [|1; 0|]
             |[|0; 1|] 2: append -> [|0; 1; 2|], prepend -> [|2; 0; 1|]
             |[|0; 1; 2|] 3: append -> [|0; 1; 2; 3|], prepend -> [|3; 0; 1; 2|]
             |}]

let%expect_test "insert" =
    let open Format in
    let test arr x =
        printf "insert %a %a ->" (pp Uns.pp) arr Uns.pp x
        for i = 0 to length arr do
            let arr' = insert i x arr in
            printf " %a" (pp Uns.pp) arr'
        printf "\n"
      in
    printf "@[<h>"
    test [||] 0
    test [|0|] 1
    test [|0; 1|] 2
    test [|0; 1; 2|] 3
    printf "@]"

    [%expect{|insert [||] 0 -> [|0|]
             |insert [|0|] 1 -> [|1; 0|] [|0; 1|]
             |insert [|0; 1|] 2 -> [|2; 0; 1|] [|0; 2; 1|] [|0; 1; 2|]
             |insert [|0; 1; 2|] 3 -> [|3; 0; 1; 2|] [|0; 3; 1; 2|] [|0; 1; 3; 2|] [|0; 1; 2; 3|]
             |}]

let%expect_test "remove" =
    let open Format in
    let test arr =
        printf "remove %a ->" (pp Uns.pp) arr
        for i = 0 to pred (length arr) do
            let arr' = remove i arr in
            printf " %a" (pp Uns.pp) arr'
        printf "\n"
      in
    printf "@[<h>"
    test [|0|]
    test [|0; 1|]
    test [|0; 1; 2|]
    printf "@]"

    [%expect{|remove [|0|] -> [||]
             |remove [|0; 1|] -> [|1|] [|0|]
             |remove [|0; 1; 2|] -> [|1; 2|] [|0; 2|] [|0; 1|]
             |}]

let%expect_test "reduce" =
    let open Format in
    let test_reduce arr ~f =
        printf "reduce %a" (pp Uns.pp) arr
        match reduce arr ~f with
        | None -> printf " -> None\n"
        | Some x -> printf " -> %a\n" Uns.pp x
      in
    let f a b = (a + b) in
    printf "@[<h>"
    test_reduce [||] ~f
    test_reduce [|0; 1; 2; 3; 4|] ~f
    printf "@]"

    [%expect{|reduce [||] -> None
             |reduce [|0; 1; 2; 3; 4|] -> 10
             |}]

let%expect_test "swap,swap_inplace" =
    let open Format in
    let test_swap arr =
        for i = 0 to pred (length arr) do
            for j = i to pred (length arr) do
                let arr' = copy arr in
                printf "%a %a: swap %a -> %a -> swap_inplace %a -> " Uns.pp i
                  Uns.pp j (pp Uns.pp) arr' (pp Uns.pp) (swap i j arr') (pp
                  Uns.pp) arr'
                swap_inplace i j arr';
                printf "%a\n" (pp Uns.pp) arr'
      in
    printf "@[<h>"
    test_swap [|0|]
    test_swap [|0; 1|]
    test_swap [|0; 1; 2|]
    test_swap [|0; 1; 2; 3|]
    printf "@]"

    [%expect{"\
0 0: swap [|0|] -> [|0|] -> swap_inplace [|0|] -> [|0|]
0 0: swap [|0; 1|] -> [|0; 1|] -> swap_inplace [|0; 1|] -> [|0; 1|]
0 1: swap [|0; 1|] -> [|1; 0|] -> swap_inplace [|0; 1|] -> [|1; 0|]
1 1: swap [|0; 1|] -> [|0; 1|] -> swap_inplace [|0; 1|] -> [|0; 1|]
0 0: swap [|0; 1; 2|] -> [|0; 1; 2|] -> swap_inplace [|0; 1; 2|] -> [|0; 1; 2|]
0 1: swap [|0; 1; 2|] -> [|1; 0; 2|] -> swap_inplace [|0; 1; 2|] -> [|1; 0; 2|]
0 2: swap [|0; 1; 2|] -> [|2; 1; 0|] -> swap_inplace [|0; 1; 2|] -> [|2; 1; 0|]
1 1: swap [|0; 1; 2|] -> [|0; 1; 2|] -> swap_inplace [|0; 1; 2|] -> [|0; 1; 2|]
1 2: swap [|0; 1; 2|] -> [|0; 2; 1|] -> swap_inplace [|0; 1; 2|] -> [|0; 2; 1|]
2 2: swap [|0; 1; 2|] -> [|0; 1; 2|] -> swap_inplace [|0; 1; 2|] -> [|0; 1; 2|]
0 0: swap [|0; 1; 2; 3|] -> [|0; 1; 2; 3|] -> swap_inplace [|0; 1; 2; 3|] -> [|0; 1; 2; 3|]
0 1: swap [|0; 1; 2; 3|] -> [|1; 0; 2; 3|] -> swap_inplace [|0; 1; 2; 3|] -> [|1; 0; 2; 3|]
0 2: swap [|0; 1; 2; 3|] -> [|2; 1; 0; 3|] -> swap_inplace [|0; 1; 2; 3|] -> [|2; 1; 0; 3|]
0 3: swap [|0; 1; 2; 3|] -> [|3; 1; 2; 0|] -> swap_inplace [|0; 1; 2; 3|] -> [|3; 1; 2; 0|]
1 1: swap [|0; 1; 2; 3|] -> [|0; 1; 2; 3|] -> swap_inplace [|0; 1; 2; 3|] -> [|0; 1; 2; 3|]
1 2: swap [|0; 1; 2; 3|] -> [|0; 2; 1; 3|] -> swap_inplace [|0; 1; 2; 3|] -> [|0; 2; 1; 3|]
1 3: swap [|0; 1; 2; 3|] -> [|0; 3; 2; 1|] -> swap_inplace [|0; 1; 2; 3|] -> [|0; 3; 2; 1|]
2 2: swap [|0; 1; 2; 3|] -> [|0; 1; 2; 3|] -> swap_inplace [|0; 1; 2; 3|] -> [|0; 1; 2; 3|]
2 3: swap [|0; 1; 2; 3|] -> [|0; 1; 3; 2|] -> swap_inplace [|0; 1; 2; 3|] -> [|0; 1; 3; 2|]
3 3: swap [|0; 1; 2; 3|] -> [|0; 1; 2; 3|] -> swap_inplace [|0; 1; 2; 3|] -> [|0; 1; 2; 3|]
"}]

let%expect_test "rev,rev_inplace" =
    let open Format in
    let test_rev arr =
        printf "rev %a -> %a -> rev_inplace %a -> " (pp Uns.pp) arr (pp Uns.pp)
          (rev arr) (pp Uns.pp) arr
        rev_inplace arr
        printf "%a\n" (pp Uns.pp) arr
      in
    printf "@[<h>"
    test_rev [|0|]
    test_rev [|0; 1|]
    test_rev [|0; 1; 2|]
    test_rev [|0; 1; 2; 3|]
    printf "@]"

    [%expect{|rev [|0|] -> [|0|] -> rev_inplace [|0|] -> [|0|]
             |rev [|0; 1|] -> [|1; 0|] -> rev_inplace [|0; 1|] -> [|1; 0|]
             |rev [|0; 1; 2|] -> [|2; 1; 0|] -> rev_inplace [|0; 1; 2|] -> [|2; 1; 0|]
             |rev [|0; 1; 2; 3|] -> [|3; 2; 1; 0|] -> rev_inplace [|0; 1; 2; 3|] -> [|3; 2; 1; 0|]
             |}]

let%expect_test "blit" =
    let open Format in
    let test_blit len i0 arr0 i1 arr1 =
        printf "blit %a %a %a %a %a -> " Uns.pp len Uns.pp i0 (pp Uns.pp) arr0
          Uns.pp i1 (pp Uns.pp) arr1
        blit len i0 arr0 i1 arr1
        printf "%a\n" (pp Uns.pp) arr1
      in
    printf "@[<h>"
    test_blit 0 0 [||] 0 [||]
    test_blit 1 0 [|0|] 0 [|1|]
    test_blit 1 1 [|0; 1|] 0 [|2|]
    test_blit 1 0 [|0|] 1 [|1; 2|]
    test_blit 2 0 [|0; 1|] 0 [|2; 3|]
    test_blit 2 1 [|0; 1; 2|] 0 [|3; 4; 5|]
    test_blit 3 0 [|0; 1; 2|] 0 [|3; 4; 5|]
    printf "@]"

    [%expect{|blit 0 0 [||] 0 [||] -> [||]
             |blit 1 0 [|0|] 0 [|1|] -> [|0|]
             |blit 1 1 [|0; 1|] 0 [|2|] -> [|1|]
             |blit 1 0 [|0|] 1 [|1; 2|] -> [|1; 0|]
             |blit 2 0 [|0; 1|] 0 [|2; 3|] -> [|0; 1|]
             |blit 2 1 [|0; 1; 2|] 0 [|3; 4; 5|] -> [|1; 2; 5|]
             |blit 3 0 [|0; 1; 2|] 0 [|3; 4; 5|] -> [|0; 1; 2|]
             |}]

let%expect_test "is_sorted" =
    let open Format in
    let test_is_sorted arr =
        printf "is_sorted %a: not strict -> %B, strict -> %B\n" (pp Uns.pp) arr
          (is_sorted arr ~cmp:Uns.cmp) (is_sorted ~strict:true arr ~cmp:Uns.cmp)
      in
    printf "@[<h>"
    test_is_sorted [||]
    test_is_sorted [|0|]
    test_is_sorted [|0; 0|]
    test_is_sorted [|0; 1|]
    test_is_sorted [|1; 0|]
    test_is_sorted [|0; 1; 1|]
    test_is_sorted [|0; 1; 2|]
    test_is_sorted [|0; 2; 1|]
    printf "@]"

    [%expect{|is_sorted [||]: not strict -> true, strict -> true
             |is_sorted [|0|]: not strict -> true, strict -> true
             |is_sorted [|0; 0|]: not strict -> true, strict -> false
             |is_sorted [|0; 1|]: not strict -> true, strict -> true
             |is_sorted [|1; 0|]: not strict -> false, strict -> false
             |is_sorted [|0; 1; 1|]: not strict -> true, strict -> false
             |is_sorted [|0; 1; 2|]: not strict -> true, strict -> true
             |is_sorted [|0; 2; 1|]: not strict -> false, strict -> false
             |}]

type sort_elm =
    key: uns (* Random, possibly non-unique. *)
    sn: uns (* Sequential in initial array. *)
let%expect_test "sort" =
    let gen_array len =
        let key_limit =
            if len > 0 then len
            else 1
          in
        init len ~f:(fun i -> {key=Random.int key_limit; sn=i})
      in
    let cmp elm0 elm1 =
        Uns.cmp elm0.key elm1.key
      in
    let test_sort arr =
        let arr' = sort arr ~cmp in
        assert (is_sorted arr' ~cmp)

        let arr' = sort ~stable:true arr ~cmp in
        assert (is_sorted ~strict:true arr' ~cmp:(fun elm0 elm1 ->
            match cmp elm0 elm1 with
            | Cmp.Lt -> Cmp.Lt
            | Cmp.Eq -> Uns.cmp elm0.sn elm1.sn
            | Cmp.Gt -> Cmp.Gt
          ))
      in
    Random.init 0;
    for len = 0 to 257 do
        for _ = 1 to 10 do
            test_sort (gen_array len)

    [%expect""]

let%expect_test "search" =
    let open Format in
    let test_search arr key_max =
        printf "%a\n" (pp Uns.pp) arr
        for probe = 0 to key_max do
            printf "    %a -> %s, %s, %s\n" Uns.pp probe
              (match psearch probe ~cmp:Uns.cmp arr with
                | None -> "<"
                | Some (Cmp.Lt, i) -> asprintf "<[%a]=%a"
                  Uns.pp i Uns.pp (get i arr)
                | Some (Cmp.Eq, i) -> asprintf "=[%a]=%a"
                  Uns.pp i Uns.pp (get i arr)
                | Some (Cmp.Gt, i) -> asprintf ">[%a]=%a"
                  Uns.pp i Uns.pp (get i arr)
              ) (match search probe ~cmp:Uns.cmp arr with
                | None -> "<>"
                | Some i -> asprintf "=%a" Uns.pp (get i arr)
              ) (match nsearch probe ~cmp:Uns.cmp arr with
                | Some (Cmp.Lt, i) -> asprintf "<[%a]=%a"
                  Uns.pp i Uns.pp (get i arr)
                | Some (Cmp.Eq, i) -> asprintf "=[%a]=%a"
                  Uns.pp i Uns.pp (get i arr)
                | Some (Cmp.Gt, i) -> asprintf ">[%a]=%a"
                  Uns.pp i Uns.pp (get i arr)
                | None -> ">"
              )
      in
    printf "@[<h>"
    for len = 0 to 3 do
        let arr = init len ~f:(fun i -> i * 2 + 1) in
        let key_max = len * 2 in
        test_search arr key_max
    for hlen = 1 to 3 do
        let len = hlen * 2 in
        let arr = init len ~f:(fun i -> i + ((i + 1) % 2)) in
        let key_max = len in
        test_search arr key_max
    printf "@]"

    [%expect{|[||]
             |    0 -> <, <>, >
             |[|1|]
             |    0 -> <[0]=1, <>, <[0]=1
             |    1 -> =[0]=1, =1, =[0]=1
             |    2 -> >[0]=1, <>, >[0]=1
             |[|1; 3|]
             |    0 -> <[0]=1, <>, <[0]=1
             |    1 -> =[0]=1, =1, =[0]=1
             |    2 -> >[0]=1, <>, <[1]=3
             |    3 -> =[1]=3, =3, =[1]=3
             |    4 -> >[1]=3, <>, >[1]=3
             |[|1; 3; 5|]
             |    0 -> <[0]=1, <>, <[0]=1
             |    1 -> =[0]=1, =1, =[0]=1
             |    2 -> >[0]=1, <>, <[1]=3
             |    3 -> =[1]=3, =3, =[1]=3
             |    4 -> >[1]=3, <>, <[2]=5
             |    5 -> =[2]=5, =5, =[2]=5
             |    6 -> >[2]=5, <>, >[2]=5
             |[|1; 1|]
             |    0 -> <[0]=1, <>, <[0]=1
             |    1 -> =[0]=1, =1, =[1]=1
             |    2 -> >[1]=1, <>, >[1]=1
             |[|1; 1; 3; 3|]
             |    0 -> <[0]=1, <>, <[0]=1
             |    1 -> =[0]=1, =1, =[1]=1
             |    2 -> >[1]=1, <>, <[2]=3
             |    3 -> =[2]=3, =3, =[3]=3
             |    4 -> >[3]=3, <>, >[3]=3
             |[|1; 1; 3; 3; 5; 5|]
             |    0 -> <[0]=1, <>, <[0]=1
             |    1 -> =[0]=1, =1, =[1]=1
             |    2 -> >[1]=1, <>, <[2]=3
             |    3 -> =[2]=3, =3, =[3]=3
             |    4 -> >[3]=3, <>, <[4]=5
             |    5 -> =[4]=5, =5, =[5]=5
             |    6 -> >[5]=5, <>, >[5]=5
             |}]

let%expect_test "map,mapi" =
    let open Format in
    let pp_str ppf t = Format.fprintf ppf "%S" t in
    let test_map uarr =
        printf "%a -> map " (pp Uns.pp) uarr
        let sarr = map uarr ~f:(fun elm -> asprintf "%a" Uns.pp elm) in
        printf "%a" (pp pp_str) sarr
        printf " -> mapi "
        let sarr = mapi uarr ~f:(fun i elm ->
            asprintf "[%a]=%a" Uns.pp i Uns.pp elm
          ) in
        printf "%a\n" (pp pp_str) sarr
      in
    printf "@[<h>"
    test_map [||]
    test_map [|0|]
    test_map [|1; 0|]
    test_map [|2; 1; 0|]
    printf "@]"

    [%expect{|[||] -> map [||] -> mapi [||]
             |[|0|] -> map [|"0"|] -> mapi [|"[0]=0"|]
             |[|1; 0|] -> map [|"1"; "0"|] -> mapi [|"[0]=1"; "[1]=0"|]
             |[|2; 1; 0|] -> map [|"2"; "1"; "0"|] -> mapi [|"[0]=2"; "[1]=1"; "[2]=0"|]
             |}]

let%expect_test "fold_map,foldi_map" =
    let open Format in
    let pp_str ppf t = Format.fprintf ppf "%S" t in
    let test_fold_map uarr =
        let accum, sarr = fold_map uarr ~init:0 ~f:(fun accum elm ->
            (accum + elm), (asprintf "%a" Uns.pp elm)
          ) in
        let accum2, sarr2 = foldi_map uarr ~init:0 ~f:(fun i accum elm ->
            (accum + i + elm),
            (asprintf "[%a]=%a" Uns.pp i Uns.pp elm)
          ) in
        printf "%a -> fold_map %a %a -> foldi_map %a %a\n"
          (pp Uns.pp) uarr
          Uns.pp accum
          (pp pp_str) sarr
          Uns.pp accum2
          (pp pp_str) sarr2
      in
    printf "@[<h>"
    test_fold_map [||]
    test_fold_map [|0|]
    test_fold_map [|1; 0|]
    test_fold_map [|2; 1; 0|]
    printf "@]"

    [%expect{|[||] -> fold_map 0 [||] -> foldi_map 0 [||]
             |[|0|] -> fold_map 0 [|"0"|] -> foldi_map 0 [|"[0]=0"|]
             |[|1; 0|] -> fold_map 1 [|"1"; "0"|] -> foldi_map 2 [|"[0]=1"; "[1]=0"|]
             |[|2; 1; 0|] -> fold_map 3 [|"2"; "1"; "0"|] -> foldi_map 6 [|"[0]=2"; "[1]=1"; "[2]=0"|]
             |}]

let%expect_test "filter,filteri" =
    let open Format in
    let test_filter arr =
        let farr = filter arr ~f:(fun elm -> elm % 2 = 0) in
        let farr2 = filteri arr ~f:(fun _ elm -> elm % 2 = 0) in
        let farr3 = filteri arr ~f:(fun i _ -> i % 2 = 0) in
        printf "%a -> filter %a -> filteri %a %a\n"
          (pp Uns.pp) arr
          (pp Uns.pp) farr
          (pp Uns.pp) farr2
          (pp Uns.pp) farr3
      in
    printf "@[<h>"
    test_filter [||]
    test_filter [|0|]
    test_filter [|1; 0|]
    test_filter [|2; 1; 0|]
    test_filter [|3; 2; 1; 0|]
    printf "@]"

    [%expect{|[||] -> filter [||] -> filteri [||] [||]
             |[|0|] -> filter [|0|] -> filteri [|0|] [|0|]
             |[|1; 0|] -> filter [|0|] -> filteri [|0|] [|1|]
             |[|2; 1; 0|] -> filter [|2; 0|] -> filteri [|2; 0|] [|2; 0|]
             |[|3; 2; 1; 0|] -> filter [|2; 0|] -> filteri [|2; 0|] [|3; 1|]
             |}]

let%expect_test "fold2_until,foldi2_until" =
    let open Format in
    let test_fold2_until uarr0 uarr1 =
        printf "%a %a"
          (pp Uns.pp) uarr0
          (pp Uns.pp) uarr1
        let accum = fold2_until uarr0 uarr1 ~init:0
          ~f:(fun accum elm0 elm1 ->
            (accum + elm0 + elm1), (accum > 10)
          ) in
        printf " -> fold2_until %a" Uns.pp accum
        let accum = foldi2_until uarr0 uarr1 ~init:0
          ~f:(fun i accum elm0 elm1 ->
            (accum + i + elm0 + elm1), ((i + 2) >= (length uarr0))
          ) in
        printf " -> foldi2_until %a\n" Uns.pp accum
      in
    printf "@[<h>"
    test_fold2_until [||] [||]
    test_fold2_until [|1|] [|0|]
    test_fold2_until [|3; 2|] [|1; 0|]
    test_fold2_until [|5; 4; 3|] [|2; 1; 0|]
    printf "@]"

    [%expect{|[||] [||] -> fold2_until 0 -> foldi2_until 0
             |[|1|] [|0|] -> fold2_until 1 -> foldi2_until 1
             |[|3; 2|] [|1; 0|] -> fold2_until 6 -> foldi2_until 4
             |[|5; 4; 3|] [|2; 1; 0|] -> fold2_until 15 -> foldi2_until 13
             |}]

let%expect_test "fold2,foldi2" =
    let open Format in
    let test_fold2 uarr0 uarr1 =
        printf "%a %a"
          (pp Uns.pp) uarr0
          (pp Uns.pp) uarr1
        let accum = fold2 uarr0 uarr1 ~init:0 ~f:(fun accum elm0 elm1 ->
            accum + elm0 + elm1
          ) in
        printf " -> fold2 %a" Uns.pp accum
        let accum = foldi2 uarr0 uarr1 ~init:0
          ~f:(fun i accum elm0 elm1 -> accum + i + elm0 + elm1) in
        printf " -> foldi2 %a\n" Uns.pp accum
      in
    printf "@[<h>"
    test_fold2 [||] [||]
    test_fold2 [|1|] [|0|]
    test_fold2 [|3; 2|] [|1; 0|]
    test_fold2 [|5; 4; 3|] [|2; 1; 0|]
    printf "@]"

    [%expect{|[||] [||] -> fold2 0 -> foldi2 0
             |[|1|] [|0|] -> fold2 1 -> foldi2 1
             |[|3; 2|] [|1; 0|] -> fold2 6 -> foldi2 7
             |[|5; 4; 3|] [|2; 1; 0|] -> fold2 15 -> foldi2 18
             |}]

let%expect_test "iteri2" =
    let open Format in
    let print_uns_arrays arr0 arr1 =
        printf "[|"
        iteri2 arr0 arr1 ~f:(fun i elm0 elm1 ->
            if i > 0 then printf "; "
            printf "(%a, %a)" Uns.pp elm0 Uns.pp elm1
          )
        printf "|]"
      in
    let test_iter2 arr0 arr1 =
        print_uns_arrays arr0 arr1
        printf "\n"
      in
    test_iter2 [||] [||]
    test_iter2 [|0|] [|1|]
    test_iter2 [|0; 1|] [|2; 3|]
    test_iter2 [|0; 1; 2|] [|3; 4; 5|]

    [%expect{|[||]
             |[|(0, 1)|]
             |[|(0, 2); (1, 3)|]
             |[|(0, 3); (1, 4); (2, 5)|]
             |}]

let%expect_test "map2,mapi2" =
    let open Format in
    let pp_str ppf t = Format.fprintf ppf "%S" t in
    let test_map2 uarr0 uarr1 =
        let sarr = map2 uarr0 uarr1 ~f:(fun elm0 elm1 ->
            asprintf "(%a,%a)" Uns.pp elm0 Uns.pp elm1
          ) in
        let sarr2 = mapi2 uarr0 uarr1 ~f:(fun i elm0 elm1 ->
            asprintf "[%a]=(%a,%a)" Uns.pp i Uns.pp elm0 Uns.pp elm1
          ) in
        printf "%a %a -> map2 %a -> mapi2 %a\n"
          (pp Uns.pp) uarr0
          (pp Uns.pp) uarr1
          (pp pp_str) sarr
          (pp pp_str) sarr2
      in
    printf "@[<h>"
    test_map2 [||] [||]
    test_map2 [|1|] [|0|]
    test_map2 [|3; 2|] [|1; 0|]
    test_map2 [|5; 4; 3|] [|2; 1; 0|]
    printf "@]"

    [%expect{|[||] [||] -> map2 [||] -> mapi2 [||]
             |[|1|] [|0|] -> map2 [|"(1,0)"|] -> mapi2 [|"[0]=(1,0)"|]
             |[|3; 2|] [|1; 0|] -> map2 [|"(3,1)"; "(2,0)"|] -> mapi2 [|"[0]=(3,1)"; "[1]=(2,0)"|]
             |[|5; 4; 3|] [|2; 1; 0|] -> map2 [|"(5,2)"; "(4,1)"; "(3,0)"|] -> mapi2 [|"[0]=(5,2)"; "[1]=(4,1)"; "[2]=(3,0)"|]
             |}]

let%expect_test "fold2_map,foldi2_map" =
    let open Format in
    let pp_str ppf t = Format.fprintf ppf "%S" t in
    let test_fold2_map uarr0 uarr1 =
        let accum, sarr = fold2_map uarr0 uarr1 ~init:0
          ~f:(fun accum elm0 elm1 ->
            (accum + elm0 + elm1),
            (asprintf "(%a,%a)" Uns.pp elm0 Uns.pp elm1)
          ) in
        let accum2, sarr2 = foldi2_map uarr0 uarr1 ~init:0
          ~f:(fun i accum elm0 elm1 ->
            (accum + i + elm0 + elm1),
            (asprintf "[%a]=(%a,%a)" Uns.pp i Uns.pp elm0 Uns.pp elm1)
          ) in
        printf "%a %a -> fold2_map %a %a -> foldi2_map %a %a\n"
          (pp Uns.pp) uarr0
          (pp Uns.pp) uarr1
          Uns.pp accum
          (pp pp_str) sarr
          Uns.pp accum2
          (pp pp_str) sarr2
      in
    printf "@[<h>"
    test_fold2_map [||] [||]
    test_fold2_map [|1|] [|0|]
    test_fold2_map [|3; 2|] [|1; 0|]
    test_fold2_map [|5; 4; 3|] [|2; 1; 0|]
    printf "@]"

    [%expect
      {|[||] [||] -> fold2_map 0 [||] -> foldi2_map 0 [||]
       |[|1|] [|0|] -> fold2_map 1 [|"(1,0)"|] -> foldi2_map 1 [|"[0]=(1,0)"|]
       |[|3; 2|] [|1; 0|] -> fold2_map 6 [|"(3,1)"; "(2,0)"|] -> foldi2_map 7 [|"[0]=(3,1)"; "[1]=(2,0)"|]
       |[|5; 4; 3|] [|2; 1; 0|] -> fold2_map 15 [|"(5,2)"; "(4,1)"; "(3,0)"|] -> foldi2_map 18 [|"[0]=(5,2)"; "[1]=(4,1)"; "[2]=(3,0)"|]
       |}]

let%expect_test "zip,unzip" =
    let open Format in
    let test_zip arr0 arr1 =
        let arr0', arr1' = unzip (zip arr0 arr1) in
        printf "%a %a\n"
          (pp Uns.pp) arr0'
          (pp Uns.pp) arr1'
      in
    printf "@[<h>"
    test_zip [||] [||]
    test_zip [|0|] [|1|]
    test_zip [|0; 1|] [|2; 3|]
    test_zip [|0; 1; 2|] [|3; 4; 5|]
    printf "@]"

    [%expect{|[||] [||]
             |[|0|] [|1|]
             |[|0; 1|] [|2; 3|]
             |[|0; 1; 2|] [|3; 4; 5|]
             |}]
